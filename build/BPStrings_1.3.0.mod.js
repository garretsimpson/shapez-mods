(()=>{"use strict";(()=>{const{compressX64:t,decompressX64:e}=shapez,{SerializerInternal:n}=shapez,o=">>>",a="<<<",i=["uncolored","blue","green","cyan","red","purple","yellow","white"],r=["C","R","W","S"];class s{static symbolTable=[];static getCode(t){if("number"==typeof t&&Number.isInteger(t)&&0!=t)return[t];let e=[0];const n=s.symbolTable.indexOf(t);return n<0?(e.push(s.symbolTable.length),s.symbolTable.push(t)):e.push(n),e}static packEntities(e){s.symbolTable=[];let n=e.reduce(((t,e)=>[Math.min(t[0],e.components.StaticMapEntity.origin.x),Math.min(t[1],e.components.StaticMapEntity.origin.y)]),[1/0,1/0]),o=[];e.forEach((t=>{let e=t.components.StaticMapEntity,a=e.origin.x-n[0],i=e.origin.y-n[1],r=a/16|0,l=i/16|0,c=o.find((t=>t[0][0]===r&&t[0][1]===l));c||(c=[[r,l]],o.push(c));const d=s.getCode(e.code);let p=[a%16<<4|i%16,e.rotation/90<<4|e.originalRotation/90,...d],h=[];31===e.code&&(h=s.writeValue(t.components.ConstantSignal.signal.data,t.components.ConstantSignal.signal.$)),c.push([...p,...h])})),o.forEach((t=>t[0].push(t.length-1)));let i="";console.debug("##### symbols:",s.symbolTable);const r=s.symbolTable.join("\0"),l=r.length;i+=String.fromCharCode(l>>>8,255&l),i+=r,i+=String.fromCharCode(...o.flat(1/0));let c=t(i),d=btoa(i);return c.length<d.length?">>>1"+c+a:">>>0"+d+a}static unpackEntities(t,i){if(!i.startsWith(o)||!i.endsWith(a))throw"Not a blueprint string";let r=i.substring(o.length+1,i.length-a.length);switch(i.charAt(o.length)){case"0":r=atob(r);break;case"1":r=e(r);break;default:throw"Unknown blueprint format"}let l=0;const c=r.charCodeAt(l++)<<8|r.charCodeAt(l++),d=r.substring(l,l+c).split("\0");console.debug("##### symbols:",d),l+=c;let p=[0,0],h=[];for(;l<r.length;){let t=r.charCodeAt(l++),e=r.charCodeAt(l++),n=r.charCodeAt(l++);for(let o=0;o<n;o++){let n=r.charCodeAt(l++),o=r.charCodeAt(l++),a=r.charCodeAt(l++);0==a&&(a=d[r.charCodeAt(l++)]);let i={uid:0,components:{StaticMapEntity:{origin:{x:(n>>4&15)+16*t,y:(15&n)+16*e},rotation:90*(o>>4&15),originalRotation:90*(15&o),code:a}}};31===a&&([i.components.ConstantSignal,l]=s.readValue(r,l)),p=[Math.max(p[0],i.components.StaticMapEntity.origin.x),Math.max(p[1],i.components.StaticMapEntity.origin.y)],h.push(i)}}return h.map((e=>{e.components.StaticMapEntity.origin.x-=p[0]/2|0,e.components.StaticMapEntity.origin.y-=p[1]/2|0;const o=(new n).deserializeEntityNoPlace(t,e);if("string"==typeof o)throw new Error(o);return o}))}static writeValue(t,e){if("boolean_item"===e)return[1&t];if("color"===e)return[7&i.indexOf(t)|8];if("shape"===e){t=(t=t.replaceAll(":","")).padEnd(t.length>16?32:16,"-").match(/(.{2})/g);let e=[];for(let n=0;n<t.length;n++)e[Math.floor(n/8)]=e[Math.floor(n/8)]<<1|"--"!==t[n];t=t.filter((t=>"--"!==t));let n=[],o=0;for(let e=0;e<t.length;e++){const a=r.indexOf(t[e].charAt(0)),s=i.findIndex((n=>n.startsWith(t[e].charAt(1))))<<2|a,l=o%8-3;n[Math.floor(o/8)]|=l<0?s<<-l:s>>l,l>0&&(n[Math.floor(o/8)+1]|=s<<8-l&255),o+=5}return[...e,...n]}}static readValue(t,e){let n=t.charCodeAt(e++);if(0==(248&n))return[{$:"boolean_item",data:n},e];if(8==(248&n))return[{$:"color",data:i[7&n]},e];n<<=8,3840&n&&(n+=t.charCodeAt(e++));const o=new Array(16);let a=0,s=0;for(let l=0;l<16;l++)if(n>>15-l&1){s<5&&(a|=t.charCodeAt(e++)<<4-s,s+=8);let n=a>>7&31;a<<=5,s-=5;let c=r[3&n],d=i[n>>2&7].charAt(0);o[l]=c+d}else o[l]="--";let l=[];for(let t=0;t<16;t+=4){let e=o.slice(t,t+4).join("");"--------"!==e&&l.push(e)}return[{signal:{$:"shape",data:l.join(":")}},e]}}const l=JSON.parse('{"id":"bp-string","name":"Blueprint strings","author":"FatcatX and SkimnerPhi","version":"1.3.0","description":"Generate a sharable string in the system clipboard when you copy and paste blueprints.","website":"https://github.com/garretsimpson/shapez-mods","minimumGameVersion":">=1.5.0","doesNotAffectSavegame":true,"entry":"./index.js"}'),{Vector:c}=shapez,{getBuildingDataFromCode:d}=shapez,{HUDBlueprintPlacer:p}=shapez,{Mod:h}=shapez,{Blueprint:u}=shapez,{SerializerInternal:m}=shapez,g=({$old:t})=>({createBlueprintFromBuildings(...e){t.createBlueprintFromBuildings.call(this,...e),y.copyToClipboard(this.currentBlueprint.get())},pasteBlueprint(...e){const n=y.pasteFromClipboard(this.root);this.lastBlueprintUsed=n||this.lastBlueprintUsed,t.pasteBlueprint.call(this,...e)}}),b=()=>({deserializeEntityNoPlace(t,e){console.debug("##### ds-enitiy:",e);const n=e.components.StaticMapEntity;window.assert(n,"entity has no static data");const o=n.code,a=d(o),i=a.metaInstance.createEntity({root:t,origin:c.fromSerializedObject(n.origin),rotation:n.rotation,originalRotation:n.originalRotation,rotationVariant:a.rotationVariant,variant:a.variant});return i.uid=e.uid,this.deserializeComponents(t,i,e.components)||i}});class y extends h{static serializeOld(t){let e=(new m).serializeEntityArray(t);for(let t of e)delete t.uid,delete t.components.WiredPins,delete t.components.ItemEjector,delete t.components.ItemProcessor,delete t.components.UndergroundBelt;return e}static serialize(t){const e=(new m).serializeEntityArray(t);return console.debug("##### data out:",e),s.packEntities(e)}static deserialize(t,e){const n=s.unpackEntities(t,e);return console.debug("##### data in:",n),new u(n)}static async copyToClipboard(t){const e=y.serialize(t.entities);console.debug("Copy to clipboard:",e);try{await navigator.clipboard.writeText(e),console.debug("Copied blueprint to clipboard")}catch(t){console.error("Copy to clipboard failed:",t.message)}}static pasteFromClipboard(t){let e;try{const n=y.getClipboard().trim();console.debug("Received data from clipboard:",n),e=y.deserialize(t,n)}catch(t){console.error("Paste from clipboard failed:",t)}return e}static getClipboard(){var t=document.createElement("div");t.contentEditable=!0;var e=document.activeElement.appendChild(t).parentNode;t.focus(),document.execCommand("Paste",null,null);var n=t.innerText;return e.removeChild(t),n}init(){console.debug("##### Init mod:",l.id),this.modInterface.extendClass(m,b),this.modInterface.extendClass(p,g)}}var f,C;f=y,delete(C=l).entry,window.$shapez_registerMod(f,C)})()})();