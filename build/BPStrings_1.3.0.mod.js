(()=>{"use strict";(()=>{const{compressX64:t,decompressX64:e}=shapez,{SerializerInternal:n}=shapez,{gBuildingVariants:o}=shapez,i=">>>",a="<<<",r=["uncolored","blue","green","cyan","red","purple","yellow","white"],s=["C","R","W","S"];class l{constructor(){this.symbolTable=[]}getCode(t){if("number"==typeof t&&Number.isInteger(t)&&0!=t)return[t];let e=[0];const n=this.symbolTable.indexOf(t);return n<0?(e.push(this.symbolTable.length),this.symbolTable.push(t)):e.push(n),e}packEntities(e){this.symbolTable=[];let n=e.reduce(((t,e)=>[Math.min(t[0],e.components.StaticMapEntity.origin.x),Math.min(t[1],e.components.StaticMapEntity.origin.y)]),[1/0,1/0]),o=[];e.forEach((t=>{let e=t.components.StaticMapEntity,i=e.origin.x-n[0],a=e.origin.y-n[1],r=i/16|0,s=a/16|0,l=o.find((t=>t[0][0]===r&&t[0][1]===s));l||(l=[[r,s]],o.push(l));const c=this.getCode(e.code);let d=[i%16<<4|a%16,e.rotation/90<<4|e.originalRotation/90,...c],p=[];31===e.code&&(p=this.writeValue(t.components.ConstantSignal.signal.data,t.components.ConstantSignal.signal.$)),l.push([...d,...p])})),o.forEach((t=>t[0].push(t.length-1)));let i="";console.debug("##### symbols:",this.symbolTable);const r=this.symbolTable.join("\0"),s=r.length;i+=String.fromCharCode(s>>>8,255&s),i+=r,i+=String.fromCharCode(...o.flat(1/0));let l=t(i),c=btoa(i);return l.length<c.length?">>>1"+l+a:">>>0"+c+a}unpackEntities(t,r){if(!r.startsWith(i)||!r.endsWith(a))throw"Not a blueprint string";let s=r.substring(i.length+1,r.length-a.length);switch(r.charAt(i.length)){case"0":s=atob(s);break;case"1":s=e(s);break;default:throw"Unknown blueprint format"}let l=0;const c=s.charCodeAt(l++)<<8|s.charCodeAt(l++),d=s.substring(l,l+c).split("\0");console.debug("##### symbols:",d),l+=c;let p=[0,0],h=[];for(;l<s.length;){let t=s.charCodeAt(l++),e=s.charCodeAt(l++),n=s.charCodeAt(l++);for(let i=0;i<n;i++){let n=s.charCodeAt(l++),i=s.charCodeAt(l++),a=s.charCodeAt(l++);if(0==a&&(a=d[s.charCodeAt(l++)]),!o[a]){console.log("Skip building:",a);continue}let r={uid:0,components:{StaticMapEntity:{origin:{x:(n>>4&15)+16*t,y:(15&n)+16*e},rotation:90*(i>>4&15),originalRotation:90*(15&i),code:a}}};31===a&&([r.components.ConstantSignal,l]=this.readValue(s,l)),p=[Math.max(p[0],r.components.StaticMapEntity.origin.x),Math.max(p[1],r.components.StaticMapEntity.origin.y)],h.push(r)}}return h.map((e=>{e.components.StaticMapEntity.origin.x-=p[0]/2|0,e.components.StaticMapEntity.origin.y-=p[1]/2|0;const o=(new n).deserializeEntityNoPlace(t,e);if("string"==typeof o)throw new Error(o);return o}))}writeValue(t,e){if("boolean_item"===e)return[1&t];if("color"===e)return[7&r.indexOf(t)|8];if("shape"===e){t=(t=t.replaceAll(":","")).padEnd(t.length>16?32:16,"-").match(/(.{2})/g);let e=[];for(let n=0;n<t.length;n++)e[Math.floor(n/8)]=e[Math.floor(n/8)]<<1|"--"!==t[n];t=t.filter((t=>"--"!==t));let n=[],o=0;for(let e=0;e<t.length;e++){const i=s.indexOf(t[e].charAt(0)),a=r.findIndex((n=>n.startsWith(t[e].charAt(1))))<<2|i,l=o%8-3;n[Math.floor(o/8)]|=l<0?a<<-l:a>>l,l>0&&(n[Math.floor(o/8)+1]|=a<<8-l&255),o+=5}return[...e,...n]}}readValue(t,e){let n=t.charCodeAt(e++);if(0==(248&n))return[{$:"boolean_item",data:n},e];if(8==(248&n))return[{$:"color",data:r[7&n]},e];n<<=8,3840&n&&(n+=t.charCodeAt(e++));const o=new Array(16);let i=0,a=0;for(let l=0;l<16;l++)if(n>>15-l&1){a<5&&(i|=t.charCodeAt(e++)<<4-a,a+=8);let n=i>>7&31;i<<=5,a-=5;let c=s[3&n],d=r[n>>2&7].charAt(0);o[l]=c+d}else o[l]="--";let l=[];for(let t=0;t<16;t+=4){let e=o.slice(t,t+4).join("");"--------"!==e&&l.push(e)}return[{signal:{$:"shape",data:l.join(":")}},e]}}const c=JSON.parse('{"id":"bp-string","name":"Blueprint strings","author":"FatcatX and SkimnerPhi","version":"1.3.0","description":"Generate a sharable string in the system clipboard when you copy and paste blueprints.","website":"https://github.com/garretsimpson/shapez-mods","minimumGameVersion":">=1.5.0","doesNotAffectSavegame":true,"entry":"./index.js"}'),{Vector:d}=shapez,{getBuildingDataFromCode:p}=shapez,{HUDBlueprintPlacer:h}=shapez,{Mod:u}=shapez,{Blueprint:m}=shapez,{SerializerInternal:g}=shapez,b=({$old:t})=>({createBlueprintFromBuildings(...e){t.createBlueprintFromBuildings.call(this,...e),f.copyToClipboard(this.currentBlueprint.get())},pasteBlueprint(...e){const n=f.pasteFromClipboard(this.root);this.lastBlueprintUsed=n||this.lastBlueprintUsed,t.pasteBlueprint.call(this,...e)}}),y=()=>({deserializeEntityNoPlace(t,e){const n=e.components.StaticMapEntity;window.assert(n,"entity has no static data");const o=n.code,i=p(o),a=i.metaInstance.createEntity({root:t,origin:d.fromSerializedObject(n.origin),rotation:n.rotation,originalRotation:n.originalRotation,rotationVariant:i.rotationVariant,variant:i.variant});return a.uid=e.uid,this.deserializeComponents(t,a,e.components)||a}});class f extends u{static serializeOld(t){let e=(new g).serializeEntityArray(t);for(let t of e)delete t.uid,delete t.components.WiredPins,delete t.components.ItemEjector,delete t.components.ItemProcessor,delete t.components.UndergroundBelt;return e}static serialize(t){const e=(new g).serializeEntityArray(t);return console.debug("##### data out:",e),(new l).packEntities(e)}static deserialize(t,e){const n=(new l).unpackEntities(t,e);return console.debug("##### data in:",n),new m(n)}static async copyToClipboard(t){const e=f.serialize(t.entities);console.debug("Copy to clipboard:",e);try{await navigator.clipboard.writeText(e),console.debug("Copied blueprint to clipboard")}catch(t){console.error("Copy to clipboard failed:",t.message)}}static pasteFromClipboard(t){let e;try{const n=f.getClipboard().trim();console.debug("Received data from clipboard:",n),e=f.deserialize(t,n)}catch(t){console.error("Paste from clipboard failed:",t)}return e}static getClipboard(){var t=document.createElement("div");t.contentEditable=!0;var e=document.activeElement.appendChild(t).parentNode;t.focus(),document.execCommand("Paste",null,null);var n=t.innerText;return e.removeChild(t),n}init(){console.debug("##### Init mod:",c.id),this.modInterface.extendClass(g,y),this.modInterface.extendClass(h,b)}}var C,E;C=f,delete(E=c).entry,window.$shapez_registerMod(C,E)})()})();