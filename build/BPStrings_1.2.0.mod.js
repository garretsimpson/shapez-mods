(()=>{"use strict";(()=>{const{compressX64:t,decompressX64:e}=shapez,{SerializerInternal:i}=shapez,a=">>>",n="<<<",r=["uncolored","blue","green","cyan","red","purple","yellow","white"],o=["C","R","W","S"];class s{static packEntities(e){let i=e.reduce(((t,e)=>[Math.min(t[0],e.components.StaticMapEntity.origin.x),Math.min(t[1],e.components.StaticMapEntity.origin.y)]),[1/0,1/0]),a=[];e.forEach((t=>{let e=t.components.StaticMapEntity,n=e.origin.x-i[0],r=e.origin.y-i[1],o=n/16|0,l=r/16|0,c=a.find((t=>t[0][0]===o&&t[0][1]===l));c||(c=[[o,l]],a.push(c));let p=[n%16<<4|r%16,e.rotation/90<<4|e.originalRotation/90,e.code],d=[];31===e.code&&(d=s.writeValue(t.components.ConstantSignal.signal.data,t.components.ConstantSignal.signal.$)),c.push([...p,...d])})),a.forEach((t=>t[0].push(t.length-1)));let r=String.fromCharCode(...a.flat(1/0)),o=t(r),l=btoa(r);return o.length<l.length?">>>1"+o+n:">>>0"+l+n}static unpackEntities(t,r){try{if(!r.startsWith(a)||!r.endsWith(n))throw"Not a blueprint string";let o=r.substring(a.length+1,r.length-n.length);switch(r.charAt(a.length)){case"0":o=atob(o);break;case"1":o=e(o);break;default:throw"Unknown blueprint format"}let l=[0,0],c=[];for(let t=0;t<o.length;){let e=o.charCodeAt(t++),i=o.charCodeAt(t++),a=o.charCodeAt(t++);for(let n=0;n<a;n++){let a=o.charCodeAt(t++),n=o.charCodeAt(t++),r=o.charCodeAt(t++),p={uid:0,components:{StaticMapEntity:{origin:{x:(a>>4&15)+16*e,y:(15&a)+16*i},rotation:90*(n>>4&15),originalRotation:90*(15&n),code:r}}};31===r&&([p.components.ConstantSignal,t]=s.readValue(o,t)),l=[Math.max(l[0],p.components.StaticMapEntity.origin.x),Math.max(l[1],p.components.StaticMapEntity.origin.y)],c.push(p)}}return c.map((e=>{e.components.StaticMapEntity.origin.x-=l[0]/2|0,e.components.StaticMapEntity.origin.y-=l[1]/2|0;const a=(new i).deserializeEntityNoPlace(t,e);if("string"==typeof a)throw new Error(a);return a}))}catch(t){console.error("Invalid blueprint data:",t.message)}}static writeValue(t,e){if("boolean_item"===e)return[1&t];if("color"===e)return[7&r.indexOf(t)|8];if("shape"===e){t=(t=t.replaceAll(":","")).padEnd(t.length>16?32:16,"-").match(/(.{2})/g);let e=[];for(let i=0;i<t.length;i++)e[Math.floor(i/8)]=e[Math.floor(i/8)]<<1|"--"!==t[i];t=t.filter((t=>"--"!==t));let i=[],a=0;for(let e=0;e<t.length;e++){const n=o.indexOf(t[e].charAt(0)),s=r.findIndex((i=>i.startsWith(t[e].charAt(1))))<<2|n,l=a%8-3;i[Math.floor(a/8)]|=l<0?s<<-l:s>>l,l>0&&(i[Math.floor(a/8)+1]|=s<<8-l&255),a+=5}return[...e,...i]}}static readValue(t,e){let i=t.charCodeAt(e++);if(0==(248&i))return[{$:"boolean_item",data:i},e];if(8==(248&i))return[{$:"color",data:r[7&i]},e];i<<=8,3840&i&&(i+=t.charCodeAt(e++));const a=new Array(16);let n=0,s=0;for(let l=0;l<16;l++)if(i>>15-l&1){s<5&&(n|=t.charCodeAt(e++)<<4-s,s+=8);let i=n>>7&31;n<<=5,s-=5;let c=o[3&i],p=r[i>>2&7].charAt(0);a[l]=c+p}else a[l]="--";let l=[];for(let t=0;t<16;t+=4){let e=a.slice(t,t+4).join("");"--------"!==e&&l.push(e)}return[{signal:{$:"shape",data:l.join(":")}},e]}}const l=JSON.parse('{"id":"bp-string","name":"Blueprint strings","author":"FatcatX and SkimnerPhi","version":"1.2.0","description":"Generate a sharable string for when you copy & paste designs. Strings are exported to clipboard automatically on blueprint copy, use Ctrl-V to import.","website":"https://github.com/garretsimpson/shapez-mods","minimumGameVersion":">=1.5.0","entry":"./index.js"}'),{Vector:c}=shapez,{getBuildingDataFromCode:p}=shapez,{HUDBlueprintPlacer:d}=shapez,{Mod:h}=shapez,{Blueprint:u}=shapez,{SerializerInternal:g}=shapez,m=({$old:t})=>({createBlueprintFromBuildings(...e){t.createBlueprintFromBuildings.call(this,...e),y.copyToClipboard(this.currentBlueprint.get())},async pasteBlueprint(...e){const i=await y.pasteFromClipboard(this.root);this.lastBlueprintUsed=i||this.lastBlueprintUsed,t.pasteBlueprint.call(this,...e)}}),f=()=>({deserializeEntityNoPlace(t,e){const i=e.components.StaticMapEntity;window.assert(i,"entity has no static data");const a=i.code,n=p(a),r=n.metaInstance.createEntity({root:t,origin:c.fromSerializedObject(i.origin),rotation:i.rotation,originalRotation:i.originalRotation,rotationVariant:n.rotationVariant,variant:n.variant});return r.uid=e.uid,this.deserializeComponents(t,r,e.components)||r}});class y extends h{static serializeOld(t){let e=(new g).serializeEntityArray(t);for(let t of e)delete t.uid,delete t.components.WiredPins,delete t.components.ItemEjector,delete t.components.ItemProcessor,delete t.components.UndergroundBelt;return e}static serialize(t){const e=(new g).serializeEntityArray(t);return s.packEntities(e)}static deserialize(t,e){const i=s.unpackEntities(t,e);return new u(i)}static async copyToClipboard(t){const e=y.serialize(t.entities);console.debug(e);try{await navigator.clipboard.writeText(e),console.debug("Copied blueprint to clipboard")}catch(t){console.error("Copy to clipboard failed:",t.message)}}static pasteFromClipboard(t,e){if("state-InGameState"!==this.root.app.inputMgr.getTopReciever().context)return;let i;try{let a=t.clipboardData.getData("text").trim();i=y.deserialize(e,a),console.debug("Received data from clipboard")}catch(t){console.error("Paste from clipboard failed:",t.message)}return i}init(){console.debug("##### Init mod:",l.id),this.modInterface.extendClass(g,f),this.modInterface.extendClass(d,m)}}var b,C;b=y,delete(C=l).entry,window.$shapez_registerMod(b,C)})()})();