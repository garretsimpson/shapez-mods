(()=>{"use strict";(()=>{const{compressX64:t,decompressX64:e}=shapez,{SerializerInternal:o}=shapez,{gBuildingVariants:n}=shapez,i=">>>",s="<<<",r={31:"ConstantSignal",33:"Lever"},a=["uncolored","blue","green","cyan","red","purple","yellow","white"],c=["C","R","W","S"],l={"v0-b64":{id:"0",b64:!0,bcb:!0},"v0-compress":{id:"1",compress:!0,bcb:!0},"v1-b64":{id:"2",b64:!0,symbols:!0,bcb:!0},"v1-compress":{id:"3",compress:!0,symbols:!0,bcb:!0},"v2-b64":{id:"4",b64:!0,symbols:!0},"v2-compress":{id:"5",compress:!0,symbols:!0},"v3-b64":{id:"6",b64:!0,symbols:!0,state:!0},"v3-compress":{id:"7",compress:!0,symbols:!0,state:!0}};class p{constructor(){this.symbolTable=[],this.configTable={};for(let t of Object.values(l))this.configTable[t.id]=t}getCode(t){if("number"==typeof t&&Number.isInteger(t)&&0!=t)return[t];let e=[0];const o=this.symbolTable.indexOf(t);return o<0?(e.push(this.symbolTable.length),this.symbolTable.push(t)):e.push(o),e}check(t){const e=new Error("Invalid blueprint data");if("object"!=typeof t||!Array.isArray(t))throw e;for(let o of t){if(!o.components||!o.components.StaticMapEntity)throw e;const t=o.components.StaticMapEntity;if(!t.code||!t.origin)throw e}}chunkIt(t){const e=t.map((t=>t.components.StaticMapEntity.origin.x)).reduce(((t,e)=>Math.min(t,e))),o=t.map((t=>t.components.StaticMapEntity.origin.y)).reduce(((t,e)=>Math.min(t,e))),n=[];return t.forEach((t=>{const i=t.components.StaticMapEntity.origin,s=i.x-e,r=i.y-o,a=s/16|0,c=r/16|0;let l=n.find((t=>t.idX==a&&t.idY==c));l||(l={idX:a,idY:c},l.data=[],n.push(l));const p={x:s%16,y:r%16,entity:t};l.data.push(p)})),n}formatOutput(e){let o="";console.debug("##### symbols:",this.symbolTable);const n=this.symbolTable.join("\0"),r=n.length;o+=String.fromCharCode(r>>>8,255&r),o+=n,o+=String.fromCharCode(...e);let a=t(o),c=btoa(o),p=i;a.length<c.length?p+=l["v3-compress"].id+a:p+=l["v3-b64"].id+c,p+=s;const d=new RegExp(".{1,64}","g");return p=p.match(d).join("\n"),p}packEntities(t){this.symbolTable=[],this.check(t);const e=this.chunkIt(t),o=[];return e.forEach((t=>{o.push(t.idX,t.idY),o.push(t.data.length-1),t.data.forEach((t=>{const e=t.entity.components,n=t.x<<4|t.y,i=e.StaticMapEntity,s=i.rotation/90<<4|i.originalRotation/90,r=this.getCode(i.code);o.push(n,s,...r);const a=Object.entries(e);for(let[t,e]of a){const n={};if(e.copyAdditionalStateTo(n),0==Object.keys(n).length)continue;let i=!0;const s=this["pack"+t];s||(console.log("Unknown component with state:",t),i=!1);const r=e.serialize(),a=this["check"+t];a&&!a(r)&&(console.debug("Unknown component state:",t,r),i=!1);let c=[0];i&&(c=s(r)),o.push(...c)}}))})),this.formatOutput(o)}unpackEntities(t,a){if(!a.startsWith(i)||!a.endsWith(s))throw"Not a blueprint string";const c=a.charAt(i.length);let l=a.substring(i.length+1,a.length-s.length);const p=this.configTable[c];if(!p)throw`Unknown blueprint string format: ${c}`;p.b64&&(l=atob(l)),p.compress&&(l=e(l));let d=0,h=[];if(p.symbols){const t=l.charCodeAt(d++)<<8|l.charCodeAt(d++);h=l.substring(d,d+t).split("\0"),console.debug("##### symbols:",h),d+=t}let b={x:0,y:0},u=[];for(;d<l.length;){let t=l.charCodeAt(d++),e=l.charCodeAt(d++),o=l.charCodeAt(d++);p.bcb||o++;for(let i=0;i<o;i++){let o=l.charCodeAt(d++),i=l.charCodeAt(d++),s=l.charCodeAt(d++);if(p.symbols&&0==s&&(s=h[l.charCodeAt(d++)]),!n[s]){console.log("Skip building:",s);continue}let a={uid:0,components:{StaticMapEntity:{origin:{x:(o>>4&15)+16*t,y:(15&o)+16*e},rotation:90*(i>>4&15),originalRotation:90*(15&i),code:s}}},c="";if(p.state?c=r[s]:31==s&&(c="ConstantSignal"),c){const t=this["unpack"+c];[a.components[c],d]=t(l,d)}b.x=Math.max(b.x,a.components.StaticMapEntity.origin.x),b.y=Math.max(b.y,a.components.StaticMapEntity.origin.y),u.push(a)}}return u.map((e=>{const n=e.components.StaticMapEntity.origin;n.x-=b.x/2|0,n.y-=b.y/2|0;const i=(new o).deserializeEntityNoPlace(t,e);if("string"==typeof i)throw new Error(i);return i}))}checkConstantSignal(t){if(!t.signal)return!1;const e=t.signal;if(!/^(?:boolean_item|color|shape)$/.test(e.$))return!1;const o=a.join("|"),n=c.join("")+a.map((t=>t[0])).join("")+"-:";return!!new RegExp(`^(?:[01]|${o}|[${n}]{1,35})$`).test(e.data)}packConstantSignal(t){const e=t.signal.$;let o=t.signal.data;if("boolean_item"===e)return[1&o];if("color"===e)return[7&a.indexOf(o)|8];if("shape"===e){o=o.replaceAll(":",""),o=o.padEnd(o.length>8?32:16,"-").match(/(.{2})/g);let t=[];for(let e=0;e<o.length;e++){const n=Math.floor(e/8);t[n]=t[n]<<1|"--"!==o[e]}o=o.filter((t=>"--"!==t));let e=[],n=0;for(let t=0;t<o.length;t++){const i=c.indexOf(o[t].charAt(0)),s=a.findIndex((e=>e.startsWith(o[t].charAt(1))))<<2|i,r=Math.floor(n/8),l=n%8-3;e[r]|=l<0?s<<-l:s>>l,l>0&&(e[r+1]|=s<<8-l&255),n+=5}return[...t,...e]}}unpackConstantSignal(t,e){let o,n,i=t.charCodeAt(e++);if(0==(248&i))o="boolean_item",n=i;else if(8==(248&i))o="color",n=a[7&i];else{i<<=8,3840&i&&(i+=t.charCodeAt(e++));const s=new Array(16);let r=0,l=0;for(let o=0;o<16;o++)if(i>>15-o&1){l<5&&(r|=t.charCodeAt(e++)<<4-l,l+=8);let n=r>>7&31;r<<=5,l-=5;let i=c[3&n],p=a[n>>2&7].charAt(0);s[o]=i+p}else s[o]="--";let p=[];for(let t=0;t<16;t+=4){let e=s.slice(t,t+4).join("");"--------"!==e&&p.push(e)}o="shape",n=p.join(":")}return[{signal:{$:o,data:n}},e]}packLever(t){return t.toggled?[1]:[0]}unpackLever(t,e){return[{toggled:1==t.charCodeAt(e++)},e]}}const d=JSON.parse('{"id":"bp-string","name":"Blueprint strings","author":"FatcatX and SkimnerPhi","version":"1.7.0","website":"https://github.com/garretsimpson/shapez-mods","description":"Generate a sharable string in the system clipboard when you copy and paste blueprints.","minimumGameVersion":">=1.5.0","settings":{"mode":"pack"},"doesNotAffectSavegame":true,"modId":"1779764","entry":"./index.js"}'),{Vector:h}=shapez,{getBuildingDataFromCode:b}=shapez,{HUDBlueprintPlacer:u}=shapez,{Mod:m}=shapez,{Blueprint:g}=shapez,{SerializerInternal:f}=shapez,{HUDSandboxController:y}=shapez,{HubGoals:C}=shapez,S=()=>({giveBlueprints(){["CbCbCbRb:CwCwCwCw","Sb----Sb:CbCbCbCb:--CwCw--","Sb----Sb:3b3b3b3b:--3w3w--","SbSbSbSb:1b1b1b1b:--CwCw--"].forEach((t=>{this.root.hubGoals.storedShapes[t]||(this.root.hubGoals.storedShapes[t]=0),this.root.hubGoals.storedShapes[t]+=1e3}))}}),w=({$old:t})=>({createBlueprintFromBuildings(...e){t.createBlueprintFromBuildings.call(this,...e),x.copyToClipboard(this.currentBlueprint.get())},pasteBlueprint(...e){const o=x.pasteFromClipboard(this.root);this.lastBlueprintUsed=o||this.lastBlueprintUsed,t.pasteBlueprint.call(this,...e)}}),E=()=>({deserializeEntityNoPlace(t,e){const o=e.components.StaticMapEntity;window.assert(o,"entity has no static data");const n=o.code,i=b(n),s=i.metaInstance.createEntity({root:t,origin:h.fromSerializedObject(o.origin),rotation:o.rotation,originalRotation:o.originalRotation,rotationVariant:i.rotationVariant,variant:i.variant});return s.uid=e.uid,this.deserializeComponents(t,s,e.components)||s}});class x extends m{static serializeAsJson(t){const e=[];for(let o of t){if(o.queuedForDestroy||o.destroyed)continue;const t=o.serialize();delete t.uid;const n=Object.entries(o.components);for(let[e,o]of n){const n={};o.copyAdditionalStateTo(n),"StaticMapEntity"==e||Object.keys(n).length>0||delete t.components[e]}e.push(t)}return JSON.stringify(e)}static deserializeJson(t,e){const o=JSON.parse(e);if("object"!=typeof o)return;if(!Array.isArray(o))return;const n=new f,i=[];for(let e=0;e<o.length;++e){const s=o[e];if(!s.components||!s.components.StaticMapEntity)return;const r=s.components.StaticMapEntity;if(!r.code||!r.origin)return;const a=n.deserializeEntityNoPlace(t,s);if("string"==typeof a)throw new Error(a);i.push(a)}return i}static serialize(t){const e=d.settings.mode;let o="";switch(e){case"json":o=x.serializeAsJson(t);break;case"pack":o=(new p).packEntities(t);break;default:throw`Unknown blueprint string mode: ${e}`}return o}static deserialize(t,e){let o;try{if(o=x.deserializeJson(t,e),!o)throw"Unable to parse blueprint string as JSON"}catch(n){o=(new p).unpackEntities(t,e)}return o}static async copyToClipboard(t){try{const e=x.serialize(t.entities);console.debug("Copy to clipboard:",e),await navigator.clipboard.writeText(e),console.debug("Copied blueprint to clipboard")}catch(t){console.error("Copy to clipboard failed:",t)}}static pasteFromClipboard(t){const e=/[\r\n\u00A0]/;let o,n;try{o=x.getClipboard().trim(),console.debug("Received data from clipboard:",o),o=o.replaceAll(e,"");const i=x.deserialize(t,o);if(!i)throw"Unable to parse blueprint string";n=new g(i)}catch(t){console.error("Paste from clipboard failed:",t)}return n}static getClipboard(){var t=document.createElement("div");t.contentEditable=!0;var e=document.activeElement.appendChild(t).parentNode;t.focus(),document.execCommand("Paste",null,null);var o=t.innerText;return e.removeChild(t),o}initSandbox(){this.modInterface.registerHudElement("sandboxController",y),this.modInterface.extendClass(y,S)}init(){console.debug("##### Init mod:",d.id),this.initSandbox(),this.modInterface.extendClass(f,E),this.modInterface.extendClass(u,w)}}var z,A;z=x,delete(A=d).entry,window.$shapez_registerMod(z,A)})()})();