(()=>{"use strict";(()=>{const{compressX64:t,decompressX64:e}=shapez,{gBuildingVariants:n}=shapez,{SerializerInternal:o}=shapez,a=">>>",i="<<<",s=["uncolored","blue","green","cyan","red","purple","yellow","white"],r=["C","R","W","S"],l="\0",c={"v0-b64":{id:"0",b64:!0,bcb:!0},"v0-compress":{id:"1",compress:!0,bcb:!0},"v1-b64":{id:"2",b64:!0,symbols:!0,bcb:!0},"v1-compress":{id:"3",compress:!0,symbols:!0,bcb:!0},"v2-b64":{id:"4",b64:!0,symbols:!0},"v2-compress":{id:"5",compress:!0,symbols:!0},"v3-b64":{id:"6",b64:!0,symbols:!0,state:!0},"v3-compress":{id:"7",compress:!0,symbols:!0,state:!0}};class h{constructor(){this.configTable={};for(let t of Object.values(c))this.configTable[t.id]=t;this.symbolTable=[]}clearStateTables(){this.stateTable=[],this.constantSignalTable=[]}getSymbolTableData(){console.debug("##### symbols:",this.symbolTable);let t="";const e=this.symbolTable.join(l),n=e.length;return t+=String.fromCharCode(n>>>8,255&n),t+=e,t}getStateTableData(){console.debug("State table entries:",this.stateTable.length);let t="";const e=this.stateTable.join(l),n=e.length;return t+=String.fromCharCode(n>>>8,255&n),t+=e,t}getConstantSignalTableData(){console.debug("Signal table entries:",this.constantSignalTable.length);let t="";const e=this.constantSignalTable.join(""),n=e.length;return t+=String.fromCharCode(n>>>8,255&n),t+=e,t}dedup(t,e){let n;const o=t.indexOf(e);return o<0?(n=t.length,t.push(e)):n=o,n}setSymbolTable(t,e){const n=t.charCodeAt(e++)<<8|t.charCodeAt(e++);return this.symbolTable=t.substring(e,e+n).split(l),console.debug("##### symbols:",this.symbolTable),e+n}setStateTable(t,e){const n=t.charCodeAt(e++)<<8|t.charCodeAt(e++);return this.stateTable=t.substring(e,e+n).split(l),e+n}setConstantSignalTable(t,e){const n=t.charCodeAt(e++),o=t.charCodeAt(e++),a=e+(n<<8|o);let i;for(this.constantSignalTable=[];e<a;)[i,e]=this.unpackConstantSignal(t,e),this.constantSignalTable.push(i);return a}getCode(t){return"number"==typeof t&&Number.isInteger(t)&&0!=t?[t]:[0,this.dedup(this.symbolTable,t)]}packEntities(t){this.check(t);const e=this.chunkIt(t);let n="";return e.forEach((t=>{const e=[];e.push(t.idX,t.idY),e.push(t.data.length-1),this.clearStateTables(),t.data.forEach((t=>{const n=t.x<<4|t.y,o=t.entity.components.StaticMapEntity,a=o.rotation/90<<4|o.originalRotation/90,i=this.getCode(o.code);e.push(n,a,...i);const s=this.packState(t.entity);e.push(...s)})),n+=String.fromCharCode(...e),n+=this.getStateTableData(),n+=this.getConstantSignalTableData()})),this.format(n)}check(t){const e=new Error("Invalid blueprint data");if("object"!=typeof t||!Array.isArray(t))throw e;for(let n of t){if(!n.components||!n.components.StaticMapEntity)throw e;const t=n.components.StaticMapEntity;if(!t.code||!t.origin)throw e}}chunkIt(t){const e=t.map((t=>t.components.StaticMapEntity.origin.x)).reduce(((t,e)=>Math.min(t,e))),n=t.map((t=>t.components.StaticMapEntity.origin.y)).reduce(((t,e)=>Math.min(t,e))),o=[];return t.forEach((t=>{const a=t.components.StaticMapEntity.origin,i=a.x-e,s=a.y-n,r=i/16|0,l=s/16|0;let c=o.find((t=>t.idX==r&&t.idY==l));c||(c={idX:r,idY:l},c.data=[],o.push(c));const h={x:i%16,y:s%16,entity:t};c.data.push(h)})),o}packState(t){const e=[],n=t.components,o=Object.entries(n);for(let[t,n]of o){const o={};if(n.copyAdditionalStateTo(o),0==Object.keys(o).length)continue;const a=this.dedup(this.symbolTable,t),i=n.serialize();let s;switch(t){case"ConstantSignal":s=this.packConstantSignal(i);break;case"Lever":s=this.packLever(i);break;default:s=this.dedup(this.stateTable,JSON.stringify(i))}e.push([a,s])}return[e.length,...e.flat()]}format(e){let n="";n+=this.getSymbolTableData(),n+=e;let o=t(n),s=btoa(n),r=a;o.length<s.length?r+=c["v3-compress"].id+o:r+=c["v3-b64"].id+s,r+=i;const l=new RegExp(".{1,64}","g");return r=r.match(l).join("\n"),r}unpackEntities(t,n){if(!n.startsWith(a)||!n.endsWith(i))throw"Not a blueprint string";const s=n.charAt(a.length);let r=n.substring(a.length+1,n.length-i.length);const l=this.configTable[s];if(!l)throw`Unknown blueprint string format: ${s}`;l.b64&&(r=atob(r)),l.compress&&(r=e(r));let c=0;l.symbols&&(c=this.setSymbolTable(r,c));const h={x:0,y:0},d=[];for(;c<r.length;){const t=r.charCodeAt(c++),e=r.charCodeAt(c++);let n=r.charCodeAt(c++);l.bcb||n++;const o=[];for(let a=0;a<n;a++){let n;[n,c]=this.unpackEntity(l,r,c,t,e),h.x=Math.max(h.x,n.components.StaticMapEntity.origin.x),h.y=Math.max(h.y,n.components.StaticMapEntity.origin.y),o.push(n)}l.state&&(c=this.setStateTable(r,c),c=this.setConstantSignalTable(r,c),this.unpackState(o)),d.push(...o)}return d.map((e=>{const n=e.components.StaticMapEntity.origin;n.x-=h.x/2|0,n.y-=h.y/2|0;const a=(new o).deserializeEntityNoPlace(t,e);if("string"==typeof a)throw new Error(a);return a}))}unpackEntity(t,e,o,a,i){const s=e.charCodeAt(o++),r=e.charCodeAt(o++);let l=e.charCodeAt(o++);if(t.symbols&&0==l&&(l=this.symbolTable[e.charCodeAt(o++)]),!n[l])return void console.log("Skip building:",l);const c={uid:0,components:{StaticMapEntity:{origin:{x:(s>>4&15)+16*a,y:(15&s)+16*i},rotation:90*(r>>4&15),originalRotation:90*(15&r),code:l}}};if(t.state||31!=l||([c.components.ConstantSignal,o]=this.unpackConstantSignal(e,o)),t.state){const t=e.charCodeAt(o++);for(let n=0;n<t;n++){const t=e.charCodeAt(o++),n=e.charCodeAt(o++),a=this.symbolTable[t];c.components[a]={sidx:n}}}return[c,o]}unpackState(t){for(let e of t){const t=Object.entries(e.components);for(let[n,o]of t){const t=o.sidx;if(null==t)continue;let a;switch(n){case"ConstantSignal":a=this.constantSignalTable[t];break;case"Lever":a=this.unpackLever(t);break;default:a=JSON.parse(this.stateTable[t])}e.components[n]=a}}}checkConstantSignal(t){const e=t.signal;if(!e)return!1;if(!/^(?:boolean_item|color|shape)$/.test(e.$))return!1;const n=s.join("|"),o=r.join("")+s.map((t=>t[0])).join("")+"\\-\\:";return!!new RegExp(`^(?:[01]|${n}|[${o}]{8,35})$`).test(e.data)}packConstantSignal(t){let e,n;return n=this.checkConstantSignal(t)?this.packSignalValue(t.signal):[2,this.dedup(this.stateTable,JSON.stringify(t))],n=String.fromCharCode(...n),e=this.dedup(this.constantSignalTable,n),e}packSignalValue(t){const e=t.$;let n=t.data;if("boolean_item"===e)return[1&n];if("color"===e)return[7&s.indexOf(n)|8];if("shape"===e){n=n.replaceAll(":",""),n=n.padEnd(n.length>8?32:16,"-").match(/(.{2})/g);let t=[];for(let e=0;e<n.length;e++){const o=Math.floor(e/8);t[o]=t[o]<<1|"--"!==n[e]}n=n.filter((t=>"--"!==t));let e=[],o=0;for(let t=0;t<n.length;t++){const a=r.indexOf(n[t].charAt(0)),i=s.findIndex((e=>e.startsWith(n[t].charAt(1))))<<2|a,l=Math.floor(o/8),c=o%8-3;e[l]|=c<0?i<<-c:i>>c,c>0&&(e[l+1]|=i<<8-c&255),o+=5}return[...t,...e]}}unpackConstantSignal(t,e){let n,o,a=t.charCodeAt(e++);if(2===a){const n=t.charCodeAt(e++);return o=this.stateTable[n],[JSON.parse(o),e]}if(0==(254&a))n="boolean_item",o=a;else if(8==(248&a))n="color",o=s[7&a];else{a<<=8,3840&a&&(a+=t.charCodeAt(e++));const i=new Array(16);let l=0,c=0;for(let n=0;n<16;n++)if(a>>15-n&1){c<5&&(l|=t.charCodeAt(e++)<<4-c,c+=8);let o=l>>7&31;l<<=5,c-=5;const a=r[3&o],h=s[o>>2&7].charAt(0);i[n]=a+h}else i[n]="--";const h=[];for(let t=0;t<16;t+=4){let e=i.slice(t,t+4).join("");"--------"!==e&&h.push(e)}n="shape",o=h.join(":")}return[{signal:{$:n,data:o}},e]}checkLever(t){const e=t.toggled;return null!=e&&"boolean"==typeof e}packLever(t){return t.toggled?1:0}unpackLever(t){return{toggled:1===t}}}const d=JSON.parse('{"id":"bp-string","name":"Blueprint strings","author":"FatcatX and SkimnerPhi","version":"1.7.0","website":"https://github.com/garretsimpson/shapez-mods","description":"Generate a sharable string in the system clipboard when you copy and paste blueprints.","minimumGameVersion":">=1.5.0","settings":{"mode":"pack"},"doesNotAffectSavegame":true,"modId":"1779764","entry":"./index.js"}'),{Vector:p}=shapez,{Blueprint:b}=shapez,{getBuildingDataFromCode:u}=shapez,{HUDBlueprintPlacer:g}=shapez,{enumNotificationType:m}=shapez,{HUDSandboxController:f}=shapez,{Mod:y}=shapez,{SerializerInternal:S}=shapez,C=()=>({giveBlueprints(){["CbCbCbRb:CwCwCwCw","Sb----Sb:CbCbCbCb:--CwCw--","Sb----Sb:3b3b3b3b:--3w3w--","SbSbSbSb:1b1b1b1b:--CwCw--"].forEach((t=>{const e=this.root.hubGoals.storedShapes;e[t]||(e[t]=0),e[t]+=1e3}))}}),T=({$old:t})=>({createBlueprintFromBuildings(...e){t.createBlueprintFromBuildings.call(this,...e),k.copyToClipboard(this.currentBlueprint.get(),this.root)},pasteBlueprint(...e){const n=k.pasteFromClipboard(this.root);this.lastBlueprintUsed=n||this.lastBlueprintUsed,t.pasteBlueprint.call(this,...e)}}),w=()=>({deserializeEntityNoPlace(t,e){const n=e.components.StaticMapEntity;window.assert(n,"entity has no static data");const o=n.code,a=u(o),i=a.metaInstance.createEntity({root:t,origin:p.fromSerializedObject(n.origin),rotation:n.rotation,originalRotation:n.originalRotation,rotationVariant:a.rotationVariant,variant:a.variant});return i.uid=e.uid,this.deserializeComponents(t,i,e.components)||i}});class k extends y{static serializeAsJson(t){const e=[];for(let n of t){if(n.queuedForDestroy||n.destroyed)continue;const t=n.serialize();delete t.uid;const o=Object.entries(n.components);for(let[e,n]of o){const o={};n.copyAdditionalStateTo(o),"StaticMapEntity"==e||Object.keys(o).length>0||delete t.components[e]}e.push(t)}return JSON.stringify(e,null,2)}static deserializeJson(t,e){const n=JSON.parse(e);if("object"!=typeof n)return;if(!Array.isArray(n))return;const o=new S,a=[];for(let e=0;e<n.length;++e){const i=n[e];if(!i.components||!i.components.StaticMapEntity)return;const s=i.components.StaticMapEntity;if(null==!s.code||!s.origin)return;const r=o.deserializeEntityNoPlace(t,i);if("string"==typeof r)throw new Error(r);a.push(r)}return a}static serialize(t){const e=d.settings.mode;let n="";switch(e){case"json":n=k.serializeAsJson(t);break;case"pack":n=(new h).packEntities(t);break;default:throw`Unknown blueprint string mode: ${e}`}return n}static deserialize(t,e){let n;try{if(n=k.deserializeJson(t,e),!n)throw"Unable to parse blueprint string as JSON"}catch(o){n=(new h).unpackEntities(t,e)}return n}static async copyToClipboard(t,e){try{const n=k.serialize(t.entities);console.debug("Copy to clipboard:",n),await navigator.clipboard.writeText(n),e.hud.signals.notification.dispatch("Blueprint copied to clipboard",m.info)}catch(t){console.error("Copy to clipboard failed:",t)}}static pasteFromClipboard(t){let e,n;try{e=k.getClipboard().trim(),console.debug("Received data from clipboard:",e),e=e.split("\n").map((t=>t.trim())).join("");const o=k.deserialize(t,e);if(!o)throw"Unable to parse blueprint string";n=new b(o)}catch(t){console.error("Paste from clipboard failed:",t)}return n&&t.hud.signals.notification.dispatch("Received blueprint from clipboard",m.info),n}static getClipboard(){var t=document.createElement("div");t.contentEditable=!0;var e=document.activeElement.appendChild(t).parentNode;t.focus(),document.execCommand("Paste",null,null);var n=t.innerText;return e.removeChild(t),n}initSandbox(){this.modInterface.registerHudElement("sandboxController",f),this.modInterface.extendClass(f,C)}init(){console.debug("##### Init mod:",d.id),this.modInterface.extendClass(S,w),this.modInterface.extendClass(g,T)}}var E,v;E=k,delete(v=d).entry,window.$shapez_registerMod(E,v)})()})();