(()=>{"use strict";(()=>{const{compressX64:t,decompressX64:e}=shapez,{SerializerInternal:o}=shapez,{gBuildingVariants:i}=shapez,n=">>>",s="<<<",r=["uncolored","blue","green","cyan","red","purple","yellow","white"],a=["C","R","W","S"],l={"v0-b64":{id:"0",b64:!0,bcb:!0},"v0-compress":{id:"1",compress:!0,bcb:!0},"v1-b64":{id:"2",b64:!0,symbols:!0,bcb:!0},"v1-compress":{id:"3",compress:!0,symbols:!0,bcb:!0},"v2-b64":{id:"4",b64:!0,symbols:!0},"v2-compress":{id:"5",compress:!0,symbols:!0},"v3-b64":{id:"6",b64:!0,allState:!0},"v3-compress":{id:"7",compress:!0,allState:!0}};class c{constructor(){this.symbolTable=[],this.configTable={};for(let t of Object.values(l))this.configTable[t.id]=t}addSymbol(t){"string"!=typeof t&&(t=JSON.stringify(t));let e=this.symbolTable.indexOf(t);return e<0&&(e=this.symbolTable.length,this.symbolTable.push(t)),e}getSymbol(t){let e=this.symbolTable[t];try{e=JSON.parse(e)}catch(t){}return e}getCode(t){return"number"==typeof t&&Number.isInteger(t)&&0!=t?[t]:[0,this.addSymbol(t)]}getAdditionalState(t){const e=[],o=Object.entries(t.components);for(let t of o){const o=t[0],i=t[1],n={};i.copyAdditionalStateTo&&i.copyAdditionalStateTo(n);const s=Object.entries(n);for(let t of s){const i=t[0];let n=t[1];void 0!==n.serialize&&(n=n.serialize()),console.debug(o,i),console.debug("  ",n);const s={};s[i]=n,e.push([o,s])}}return e}packEntities(e){this.symbolTable=[];let o=e.reduce(((t,e)=>[Math.min(t[0],e.components.StaticMapEntity.origin.x),Math.min(t[1],e.components.StaticMapEntity.origin.y)]),[1/0,1/0]),i=[];e.forEach((t=>{let e=t.components.StaticMapEntity,n=e.origin.x-o[0],s=e.origin.y-o[1],r=n/16|0,a=s/16|0,l=i.find((t=>t[0][0]===r&&t[0][1]===a));l||(l=[[r,a]],i.push(l));const c=this.getCode(e.code);let d=[n%16<<4|s%16,e.rotation/90<<4|e.originalRotation/90,...c];const p=this.getAdditionalState(t),h=[p.length];for(let t of p){const e=t[0],o=t[1],i=this.addSymbol(e),n=this.addSymbol(o);h.push(i,n)}l.push([...d,...h])})),i.forEach((t=>t[0].push(t.length-2)));let r="";console.debug("##### symbols:",this.symbolTable);const a=this.symbolTable.join("\0"),c=a.length;r+=String.fromCharCode(c>>>8,255&c),r+=a,r+=String.fromCharCode(...i.flat(1/0));let d=t(r),p=btoa(r);r=n,d.length<p.length?r+=l["v3-compress"].id+d:r+=l["v3-b64"].id+p,r+=s;let h="";const b=Math.floor(r.length/64)+1;for(let t=0;t<b;t++){const e=64*t;h+=r.substring(e,e+64)+"\n"}return h}unpackEntities(t,r){if(!(r=r.replaceAll(/[\r\n]/,"")).startsWith(n)||!r.endsWith(s))throw"Not a blueprint string";const a=r.charAt(n.length);let l=r.substring(n.length+1,r.length-s.length);const c=this.configTable[a];if(!c)throw`Unknown blueprint string format: ${a}`;c.b64&&(l=atob(l)),c.compress&&(l=e(l));let d=0;if(c.symbols||c.allState){const t=l.charCodeAt(d++)<<8|l.charCodeAt(d++);this.symbolTable=l.substring(d,d+t).split("\0"),console.debug("##### symbols:",this.symbolTable),d+=t}let p=[0,0],h=[];for(;d<l.length;){const t=l.charCodeAt(d++),e=l.charCodeAt(d++);let o=l.charCodeAt(d++);c.bcb||o++;for(let n=0;n<o;n++){const o=l.charCodeAt(d++),n=l.charCodeAt(d++);let s=l.charCodeAt(d++);if((c.symbols||c.allState)&&0==s&&(s=this.getSymbol(l.charCodeAt(d++))),!i[s]){console.log("Skip building:",s);continue}let r={uid:0,components:{StaticMapEntity:{origin:{x:(o>>4&15)+16*t,y:(15&o)+16*e},rotation:90*(n>>4&15),originalRotation:90*(15&n),code:s}}};if(c.allState||31!==s||([r.components.ConstantSignal,d]=this.readValue(l,d)),c.allState){const t=l.charCodeAt(d++);for(let e=0;e<t;++e){const t=l.charCodeAt(d++),e=l.charCodeAt(d++),o=this.getSymbol(t),i=this.getSymbol(e);console.debug(o,i)}}p=[Math.max(p[0],r.components.StaticMapEntity.origin.x),Math.max(p[1],r.components.StaticMapEntity.origin.y)],h.push(r)}}return h.map((e=>{e.components.StaticMapEntity.origin.x-=p[0]/2|0,e.components.StaticMapEntity.origin.y-=p[1]/2|0;const i=(new o).deserializeEntityNoPlace(t,e);if("string"==typeof i)throw new Error(i);return i}))}writeValue(t,e){if("boolean_item"===e)return[1&t];if("color"===e)return[7&r.indexOf(t)|8];if("shape"===e){t=(t=t.replaceAll(":","")).padEnd(t.length>8?32:16,"-").match(/(.{2})/g);let e=[];for(let o=0;o<t.length;o++){const i=Math.floor(o/8);e[i]=e[i]<<1|"--"!==t[o]}t=t.filter((t=>"--"!==t));let o=[],i=0;for(let e=0;e<t.length;e++){const n=a.indexOf(t[e].charAt(0)),s=r.findIndex((o=>o.startsWith(t[e].charAt(1))))<<2|n,l=Math.floor(i/8),c=i%8-3;o[l]|=c<0?s<<-c:s>>c,c>0&&(o[l+1]|=s<<8-c&255),i+=5}return[...e,...o]}}readValue(t,e){let o=t.charCodeAt(e++);if(0==(248&o))return[{signal:{$:"boolean_item",data:o}},e];if(8==(248&o))return[{signal:{$:"color",data:r[7&o]}},e];o<<=8,3840&o&&(o+=t.charCodeAt(e++));const i=new Array(16);let n=0,s=0;for(let l=0;l<16;l++)if(o>>15-l&1){s<5&&(n|=t.charCodeAt(e++)<<4-s,s+=8);let o=n>>7&31;n<<=5,s-=5;let c=a[3&o],d=r[o>>2&7].charAt(0);i[l]=c+d}else i[l]="--";let l=[];for(let t=0;t<16;t+=4){let e=i.slice(t,t+4).join("");"--------"!==e&&l.push(e)}return[{signal:{$:"shape",data:l.join(":")}},e]}}const d=JSON.parse('{"id":"bp-string","name":"Blueprint strings","author":"FatcatX and SkimnerPhi","version":"1.6.0","description":"Generate a sharable string in the system clipboard when you copy and paste blueprints.","website":"https://github.com/garretsimpson/shapez-mods","minimumGameVersion":">=1.5.0","doesNotAffectSavegame":true,"entry":"./index.js"}'),{Vector:p}=shapez,{getBuildingDataFromCode:h}=shapez,{HUDBlueprintPlacer:b}=shapez,{Mod:m}=shapez,{Blueprint:u}=shapez,{SerializerInternal:g}=shapez,y=({$old:t})=>({createBlueprintFromBuildings(...e){t.createBlueprintFromBuildings.call(this,...e),S.copyToClipboard(this.currentBlueprint.get())},pasteBlueprint(...e){const o=S.pasteFromClipboard(this.root);this.lastBlueprintUsed=o||this.lastBlueprintUsed,t.pasteBlueprint.call(this,...e)}}),f=()=>({deserializeEntityNoPlace(t,e){const o=e.components.StaticMapEntity;window.assert(o,"entity has no static data");const i=o.code,n=h(i),s=n.metaInstance.createEntity({root:t,origin:p.fromSerializedObject(o.origin),rotation:o.rotation,originalRotation:o.originalRotation,rotationVariant:n.rotationVariant,variant:n.variant});return s.uid=e.uid,this.deserializeComponents(t,s,e.components)||s}});class S extends m{static serializeOld(t){let e=(new g).serializeEntityArray(t);for(let t of e)delete t.uid,delete t.components.WiredPins,delete t.components.ItemEjector,delete t.components.ItemProcessor,delete t.components.UndergroundBelt;return e}static serialize(t){return console.debug("##### entities out:",t),(new c).packEntities(t)}static deserialize(t,e){const o=(new c).unpackEntities(t,e);return console.debug("##### entities in:",o),new u(o)}static async copyToClipboard(t){const e=S.serialize(t.entities);console.debug("Copy to clipboard:",e);try{await navigator.clipboard.writeText(e),console.debug("Copied blueprint to clipboard")}catch(t){console.error("Copy to clipboard failed:",t.message)}}static pasteFromClipboard(t){let e;try{const o=S.getClipboard().trim();console.debug("Received data from clipboard:",o),e=S.deserialize(t,o)}catch(t){console.error("Paste from clipboard failed:",t)}return e}static getClipboard(){var t=document.createElement("div");t.contentEditable=!0;var e=document.activeElement.appendChild(t).parentNode;t.focus(),document.execCommand("Paste",null,null);var o=t.innerText;return e.removeChild(t),o}init(){console.debug("##### Init mod:",d.id),this.modInterface.extendClass(g,f),this.modInterface.extendClass(b,y)}}var C,A;C=S,delete(A=d).entry,window.$shapez_registerMod(C,A)})()})();