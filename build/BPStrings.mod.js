(()=>{"use strict";(()=>{const t=JSON.parse('{"id":"bp-string","name":"Blueprint strings","author":"FatcatX and SkimnerPhi","version":"1.1.0","description":"Generate a sharable string for when you copy & paste designs. Strings are exported to clipboard automatically on blueprint copy, use Ctrl-V to import.","website":"https://github.com/garretsimpson/shapez-mods","minimumGameVersion":">=1.5.0","entry":"./index.js"}'),{compressX64:e,decompressX64:n}=shapez,{Vector:o}=shapez,{Blueprint:a}=shapez,{getBuildingDataFromCode:i}=shapez,{HUDBlueprintPlacer:r}=shapez,{Mod:s}=shapez,{SOUNDS:l}=shapez,{SerializerInternal:c}=shapez,p=">>>",d="<<<",h=["uncolored","blue","green","cyan","red","purple","yellow","white"],u=["C","R","W","S"];function g(t,e){let n=t.charCodeAt(e++);if(0==(248&n))return[{$:"boolean_item",data:n},e];if(8==(248&n))return[{$:"color",data:h[7&n]},e];n<<=8,3840&n&&(n+=t.charCodeAt(e++)),quads=new Array(16);let o=0,a=0;for(let i=0;i<16;i++)if(n>>15-i&1){a<5&&(o|=t.charCodeAt(e++)<<4-a,a+=8);let n=o>>7&31;o<<=5,a-=5;let r=u[3&n],s=h[n>>2&7].charAt(0);quads[i]=r+s}else quads[i]="--";let i=[];for(let t=0;t<16;t+=4){let e=quads.slice(t,t+4).join("");"--------"!==e&&i.push(e)}return[{signal:{$:"shape",data:i.join(":")}},e]}var m,f;c.prototype.deserializeEntityNoPlace=function(t,e){const n=e.components.StaticMapEntity;assert(n,"entity has no static data");const a=n.code,r=i(a),s=r.metaInstance.createEntity({root:t,origin:o.fromSerializedObject(n.origin),rotation:n.rotation,originalRotation:n.originalRotation,rotationVariant:r.rotationVariant,variant:r.variant});return s.uid=e.uid,this.deserializeComponents(t,s,e.components)||s},m=class extends s{init(){this.modInterface.runAfterMethod(r,"initialize",(function(){document.addEventListener("paste",(t=>{if("state-InGameState"===this.root.app.inputMgr.getTopReciever().context){let e;try{let o=t.clipboardData.getData("text");e=function(t,e){try{if(!e.startsWith(p)||!e.endsWith(d))throw"Not a blueprint string";let o=e.substring(p.length+1,e.length-d.length);switch(e.charAt(p.length)){case"0":o=atob(o);break;case"1":o=n(o);break;default:throw"Unknown blueprint format"}let i=[0,0],r=[];for(let t=0;t<o.length;){let e=o.charCodeAt(t++),n=o.charCodeAt(t++),a=o.charCodeAt(t++);for(let s=0;s<a;s++){let a=o.charCodeAt(t++),s=o.charCodeAt(t++),l=o.charCodeAt(t++),c={uid:0,components:{StaticMapEntity:{origin:{x:(a>>4&15)+16*e,y:(15&a)+16*n},rotation:90*(s>>4&15),originalRotation:90*(15&s),code:l}}};31===l&&([c.components.ConstantSignal,t]=g(o,t)),i=[Math.max(i[0],c.components.StaticMapEntity.origin.x),Math.max(i[1],c.components.StaticMapEntity.origin.y)],r.push(c)}}const s=new c,l=r.map((e=>{e.components.StaticMapEntity.origin.x-=i[0]/2|0,e.components.StaticMapEntity.origin.y-=i[1]/2|0;const n=s.deserializeEntityNoPlace(t,e);if("string"==typeof n)throw new Error(n);return n}));return new a(l)}catch(t){console.error("Invalid blueprint data:",t.message)}}(this.root,o),console.debug("Received data from clipboard")}catch(t){console.error("Paste from clipboard failed:",t.message)}this.lastBlueprintUsed=e||this.lastBlueprintUsed,this.pasteBlueprint()}}))})),this.modInterface.runAfterMethod(r,"createBlueprintFromBuildings",(async function(){const t=(new c).serializeEntityArray(this.currentBlueprint.get().entities);console.log(t);try{const n=function(t){let n=t.reduce(((t,e)=>[Math.min(t[0],e.components.StaticMapEntity.origin.x),Math.min(t[1],e.components.StaticMapEntity.origin.y)]),[1/0,1/0]),o=[];t.forEach((t=>{let e=t.components.StaticMapEntity,a=e.origin.x-n[0],i=e.origin.y-n[1],r=a/16|0,s=i/16|0,l=o.find((t=>t[0][0]===r&&t[0][1]===s));l||(l=[[r,s]],o.push(l));let c=[a%16<<4|i%16,e.rotation/90<<4|e.originalRotation/90,e.code],p=[];31===e.code&&(p=function(t,e){if("boolean_item"===e)return[1&t];if("color"===e)return[7&h.indexOf(t)|8];if("shape"===e){t=(t=t.replaceAll(":","")).padEnd(t.length>16?32:16,"-").match(/(.{2})/g);let e=[];for(let n=0;n<t.length;n++)e[Math.floor(n/8)]=e[Math.floor(n/8)]<<1|"--"!==t[n];t=t.filter((t=>"--"!==t));let n=[],o=0;for(let e=0;e<t.length;e++){const a=u.indexOf(t[e].charAt(0)),i=h.findIndex((n=>n.startsWith(t[e].charAt(1)))),r=i<<2|a,s=o%8-3;n[Math.floor(o/8)]|=s<0?r<<-s:r>>s,s>0&&(n[Math.floor(o/8)+1]|=r<<8-s&255),o+=5}return[...e,...n]}}(t.components.ConstantSignal.signal.data,t.components.ConstantSignal.signal.$)),l.push([...c,...p])})),o.forEach((t=>t[0].push(t.length-1)));let a=String.fromCharCode(...o.flat(1/0)),i=e(a),r=btoa(a);return i.length<r.length?">>>1"+i+d:">>>0"+r+d}(t);await navigator.clipboard.writeText(n),this.root.soundProxy.playUi(l.copy),console.debug("Copied blueprint to clipboard")}catch(t){console.error("Copy to clipboard failed:",t.message)}}))}},delete(f=t).entry,window.$shapez_registerMod(m,f)})()})();